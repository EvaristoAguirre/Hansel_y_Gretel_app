"use client";
import React, { useEffect } from "react";
import { useCategoryStore } from "../../store/useCategoryStore";
import { DataGrid, GridRowsProp, GridColDef } from "@mui/x-data-grid";
import { esES } from "@mui/x-data-grid/locales/esES";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
} from "@mui/material";
import Swal from "sweetalert2";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faTrash, faEdit } from "@fortawesome/free-solid-svg-icons";
import { URI_CATEGORY } from "../../URI/URI";

const CategoriasProductos = () => {
  const {
    categories,
    setCategories,
    addCategory,
    removeCategory,
    updateCategory,
    connectWebSocket,
  } = useCategoryStore();

  const [nombre, setNombre] = React.useState("");

  useEffect(() => {
    // Fetch inicial para obtener categorías.
    async function fetchCategories() {
      try {
        const response = await fetch(URI_CATEGORY, { method: "GET" });
        const data = await response.json();
        setCategories(data);
      } catch (error) {
        console.error("Error al listar las categorías:", error);
      }
    }

    fetchCategories();
    connectWebSocket(); // Conectar WebSocket.
  }, [setCategories, connectWebSocket]);

  const rows: GridRowsProp = categories.map((category) => ({
    id: category.id,
    col1: category.name,
  }));

  const columns: GridColDef[] = [
    { field: "col1", headerName: "Nombre", width: 150 },
    {
      field: "col2",
      headerName: "Acciones",
      width: 150,
      renderCell: (params) => (
        <div style={{ display: "flex", gap: "8px", justifyContent: "center" }}>
          <Button
            variant="contained"
            color="secondary"
            size="small"
            onClick={() => handleEdit(params.row.id)}
          >
            <FontAwesomeIcon icon={faEdit} />
          </Button>
          <Button
            variant="contained"
            color="secondary"
            size="small"
            onClick={() => handleDelete(params.row.id)}
          >
            <FontAwesomeIcon icon={faTrash} />
          </Button>
        </div>
      ),
    },
  ];

  async function handleDelete(id: string) {
    try {
      await fetch(`${URI_CATEGORY}/${id}`, { method: "DELETE" });
      removeCategory(id); // Actualiza el estado local.
    } catch (error) {
      console.error("Error al eliminar la categoría:", error);
    }
  }

  async function handleCreate() {
    try {
      const response = await fetch(URI_CATEGORY, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name: nombre }),
      });
      const newCategory = await response.json();
      addCategory(newCategory); // Actualiza el estado local.
    } catch (error) {
      console.error("Error al crear la categoría:", error);
    }
  }

  async function handleEdit(id: string) {
    try {
      const response = await fetch(`${URI_CATEGORY}/${id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name: nombre }),
      });
      const updatedCategory = await response.json();
      updateCategory(updatedCategory); // Actualiza el estado local.
    } catch (error) {
      console.error("Error al editar la categoría:", error);
    }
  }

  return (
    <div>
      <div style={{ height: 300, width: "60%" }}>
        <DataGrid
          rows={rows}
          columns={columns}
          localeText={esES.components.MuiDataGrid.defaultProps.localeText}
        />
      </div>
    </div>
  );
};

export default CategoriasProductos;
